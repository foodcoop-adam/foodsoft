#
# Capistrano 3 deployment configuration
# (with small adaptations for foodcoop-adam)
#
#   http://www.capistranorb.com/
#   https://semaphoreapp.com/blog/2013/11/26/capistrano-3-upgrade-guide.html
#
#
# This is the general configuration file for deployments. In addition
# to those defaults, each deployment location has its own file in
# config/deploy/<stage>.rb. These variables are loaded after this file.
#
# Example:
#
#     set :suburi,     'test'
#     set :stage,      'production'
#     server fetch(:domain), user: fetch(:user), roles: [:web, :app, :resque, :db]
#     after 'deploy:updated', 'deploy:enable_plain_http'
#
# With this saves as `config/deploy/test.rb`, you can run the following
# to update the test environment:
#
#     capistrano test deploy deploy:restart
#


# defaults that can be updated from the environment
set :branch,              ENV["REVISION"] || ENV["BRANCH_NAME"] || "master"
set :suburi,              ENV["SUBURI"]

# you probably want to change these
set :application,         'foodsoft'            # application name (whatever you like)
set :domain,              'order.foodcoop.nl'   # host
set :user,                'deploy'              # ssh deploy user
set :run_user,            'foodsoft'            # user app runs as
set :db_user,             Proc.new { "fs_#{fetch :suburi}" }
set :keep_releases,       10
set :repo_url,            'git://github.com/foodcoop-adam/foodsoft.git'
set :deploy_to,           Proc.new { "/www/apps/#{fetch :application}_#{fetch :suburi}" }
set :sharedlists_db,      'sharedlists'

# more settings which are probably ok
set :log_level,           :info
set :linked_files,        %w{config/database.yml config/app_config.yml config/initializers/secret_token.rb config/initializers/session_store.rb}
set :linked_dirs,         %w{bin log tmp/pids tmp/cache tmp/sockets vendor/bundle public/system}

# assuming one server for everything, with one user for deploy and one for resque
# put this in your config/<stage>.rb
#server fetch(:domain), user: fetch(:user), roles: [:web, :app, :resque, :db]

# if you use RVM, uncomment the line in Capfile, and optionally uncomment rvm settings
set :rvm_type,           :system
#set :rvm_ruby_version,   '2.0'

# task hooks
namespace :deploy do

  desc 'Restart application'
  task :restart do
    on roles(:app), in: :sequence, wait: 5 do
      # tell mod_passenger to reload the application
      execute :touch, release_path.join('tmp/restart.txt')
    end
  end

  after :restart, 'resque:restart'

  after :finishing, 'deploy:cleanup'

  # see lib/capistrano/tasks/plugins.cap
  before 'bundler:install', 'enable_plugins:auto'


  # include in stage config: `after 'deploy:updated', 'deploy:payment_set_test'`
  desc 'Use test payments'
  task 'payment_set_test' do
    on roles(:app), in: :sequence do
      # test/demo instances use Adyen test infrastructure
      data = 'Adyen.configuration.environment = :test if defined? FoodsoftAdyen'
      upload! StringIO.new(data), release_path.join('config/initializers/adyen_test.rb')
      execute :chmod, 'a+r', release_path.join('config/initializers/adyen_test.rb')
    end
  end

  # include in stage config: `after 'deploy:updated', 'deploy:enable_plain_http'`
  desc 'Allow non-ssl in production'
  task 'enable_plain_http' do
    on roles(:app), in: :sequence do
      execute :sed, '-i', '\'s|^\(\s*config\.force_ssl\s*=\s*\).*$|\1false|\'',
        release_path.join("config/environments/#{fetch :stage}.rb")
    end
  end

  # some local hacks
  after 'deploy:updated', 'deploy:localhacks' do
    on roles(:app), in: :sequence do
      # use custom rake queue names
      execute :sed, '-i', "'s|foodsoft_notifier|#{fetch :suburi}_foodsoft_notifier|'",
        release_path.join('app/workers/user_notifier.rb'),
        release_path.join('lib/tasks/resque.rake')
        #release_path.join('app/workers/supplier_notifier.rb')
    end
  end

  # include suburi in session cookie path
  task 'initial:update_session_path' do
    on roles(:app), in: :sequence do
      execute :perl, '-i', '-pe',
        "'"+'s|^(.*\.config\.session_store\b.*?)(,\s*path:[^,]+(.*))?$|\1, path: "/'+fetch(:suburi)+'"\3\n|'+"'",
        shared_path.join('config/initializers/session_store.rb')
    end
  end
  after 'deploy:initial:app_config', 'deploy:initial:update_session_path'

  # also grant access to sharedlists when creating a database
  after 'initial:db:create', 'initial:db:grant_sharedlists' do
    on roles(:app), in: :sequence do
      config = capture :cat, shared_path.join("config/database.yml")
      config = YAML.load(config)[fetch(:rails_env).to_s]
      execute :mysql, "--execute='GRANT SELECT ON `#{fetch :sharedlists_db}`.`articles` TO \"#{config['username']}\";'"
      execute :mysql, "--execute='GRANT SELECT ON `#{fetch :sharedlists_db}`.`suppliers` TO \"#{config['username']}\";'"
    end
  end

  # include sharedlists in database.yml
  task 'initial:db:config:sharedlists' => ['deploy:set_rails_env'] do
    on roles(:app), in: :sequence do
      config = capture :cat, shared_path.join("config/database.yml")
      config.gsub! /^(\s*#{fetch :rails_env}:)/, "\\1 &#{fetch :rails_env}"
      config += "\nsharedlists:\n  <<: *#{fetch :rails_env}\n  database: sharedlists\n"
      upload! StringIO.new(config), shared_path.join("config/database.yml")
    end
  end
  after 'deploy:initial:db:config', 'deploy:initial:db:config:sharedlists'

  # setup awstats config
  after 'deploy:initial', 'deploy:initial:awstats' do
    on roles(:app), in: :sequence do
      config = <<-EOF
        Include "/etc/awstats/awstats.conf"
        SiteDomain="#{fetch :domain}"
        OnlyFiles="REGEX[#{fetch :suburi}\/]"
      EOF
      upload! StringIO.new(config), File.join('/etc/awstats', "awstats.#{fetch :suburi}.conf")
    end
  end

  # fix permissions!
  after 'deploy:initial', 'deploy:initial:fix_permissions' do
    on roles(:app), in: :sequence do
      # XXX run_user misused as group
      execute :chown, ":#{fetch :run_user}", shared_path.join('log'), shared_path.join('tmp/*')
      execute :chmod, 'g+ws', shared_path.join('log'), shared_path.join('tmp/*')
    end
  end

end

